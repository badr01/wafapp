'use strict';
var loading = false;
var myApp = angular.module('mgcrea.WafApp', [
    'angular-growl',
    'ngResource',
    'ngTagsInput',
    'ui.bootstrap',
    'smart-table',
    'ngRoute',
    'angularHighlightTextarea'
  ]).constant('version', 'v0.1.0').config([
    '$locationProvider',
    '$routeProvider',
    function ($locationProvider, $routeProvider) {
      $locationProvider.html5Mode(false);
      $routeProvider.when('/', { templateUrl: './views/etat.html' }).when('/etat', { templateUrl: './views/etat.html' }).when('/manage', { templateUrl: './views/manage.html' }).when('/journalisation', { templateUrl: './views/journalisation.html' }).when('/journalisationb', { templateUrl: './views/journalisationb.html' }).when('/settings', { templateUrl: './views/settings.html' }).when('/update', { templateUrl: './views/update.html' }).otherwise({ redirectTo: './' });
    }
  ]).config([
    '$httpProvider',
    function ($httpProvider) {
      $httpProvider.interceptors.push('httpInterceptor');
    }
  ]).config([
    'growlProvider',
    function (growlProvider) {
      growlProvider.globalReversedOrder(true);
      growlProvider.globalTimeToLive(3000);
    }
  ]);
'use strict';
//header page controlller
myApp.controller('MainCtrl', [
  '$scope',
  '$location',
  'version',
  function ($scope, $location, version) {
    $scope.$path = $location.path.bind($location);
    $scope.version = version;
  }
]);
//Status controller
myApp.controller('EtatCtrl', [
  '$scope',
  'Status',
  'growl',
  function ($scope, Status, growl) {
    $scope.status = {
      output: '',
      nginxStatus: false,
      haproxyStatus: false
    };
    $scope.execute = function (cmd) {
      Status.query({ cmd: cmd }, function (data) {
        $scope.status = data;
        growl.success(data.output);
      }, function (data) {
        growl.error(data.output);
      });
    };
    Status.query({ cmd: 'NGINX_STATUS' }, function (data) {
      $scope.status = data;
      growl.success(data.output);
    }, function (data) {
      growl.error(data.output);
    });
  }
]);
'use strict';
/*Pagination controller*/
myApp.controller('paginationCtrl', [
  '$scope',
  'Access',
  function ($scope, Access) {
    Access.query(function (data) {
      data.forEach(function (elt, ix, arr) {
        arr[ix].time = elt.time.$date;
      });
      $scope.rowCollection = angular.fromJson(data);
      window.aa = angular.fromJson(data);
    });
    $scope.displayCollection = [].concat($scope.rowCollection);
    $scope.itemsByPage = 15;
    $scope.predicates = [
      {
        key: 'Filter by Host',
        'value': 'host'
      },
      {
        key: 'Filter by User_IP',
        'value': 'client_ip'
      },
      {
        key: 'Filter by User',
        'value': 'client'
      },
      {
        key: 'Filter by URI_Path',
        'value': 'path'
      },
      {
        key: 'Filter by Method',
        'value': 'method'
      },
      {
        key: 'Filter by HTTP_Status',
        'value': 'code'
      },
      {
        key: 'Filter by Referer',
        'value': 'referer'
      },
      {
        key: 'Filter by Bytes',
        'value': 'size'
      },
      {
        key: 'Filter by X_Forwarded_For',
        'value': 'x_forwarded_for'
      },
      {
        key: 'Filter by User_Agent',
        'value': 'user_agent'
      }
    ];
    $scope.selectedPredicate = $scope.predicates[0].value;
  }
]);
/*date picker controller logic*/
myApp.controller('DatepickerCtrl', [
  '$scope',
  'Access',
  function ($scope, Access) {
    $scope.today = function (dt) {
      $scope[dt] = new Date();
    };
    $scope.today();
    $scope.clear = function (dt) {
      $scope[dt] = null;
    };
    $scope.getLog = function () {
      Access.query({
        from: $scope.dtFrom,
        to: $scope.dtTo
      }, function (data) {
        data.forEach(function (elt, ix, arr) {
          arr[ix].time = elt.time.$date;
        });
        $scope.$parent.rowCollection = angular.fromJson(data);
      });
    };
    $scope.open = function ($event, opened) {
      $event.preventDefault();
      $event.stopPropagation();
      $scope[opened] = opened;
    };
    $scope.dateOptions = {
      formatYear: 'yy',
      startingDay: 1
    };
    $scope.format = 'dd.MM.yyyy HH:mm:ss';
  }
]);
'use strict';
/*Pagination controller*/
myApp.controller('paginationBCtrl', [
  '$scope',
  'Error',
  '$modal',
  function ($scope, Error, $modal) {
    Error.query(function (data) {
      data.forEach(function (elt, ix, arr) {
        arr[ix].time = elt._id.time.$date;
        arr[ix].host = elt._id.host;
        arr[ix].client_ip = elt._id.client_ip;
        arr[ix].path = elt._id.path;
      });
      $scope.rowCollection = angular.fromJson(data);
      window.aa = angular.fromJson(data);
    });
    $scope.displayCollection = [].concat($scope.rowCollection);
    $scope.itemsByPage = 15;
    $scope.predicates = [
      {
        key: 'Filter by Host',
        'value': 'host'
      },
      {
        key: 'Filter by User IP',
        'value': 'client ip'
      },
      {
        key: 'Filter by URI Path',
        'value': 'path'
      }
    ];
    $scope.selectedPredicate = $scope.predicates[0].value;
    $scope.isCollapsed = true;
    // Modal: called by "supprimer site"
    $scope.openDialog = function (rules, size) {
      var $modalInstance = $modal.open({
          templateUrl: 'rulesModalDialog',
          controller: 'ShowDialogCtrl',
          size: size,
          resolve: {
            rules: function () {
              return rules;
            }
          }
        });
    };
  }
]);
//show rules modal controller
myApp.controller('ShowDialogCtrl', [
  '$scope',
  '$modalInstance',
  'rules',
  function ($scope, $modalInstance, rules) {
    $scope.rules = rules;
    //dismiss and quit the modal dialog;
    $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
    };
  }
]);
//experimental feature : filter highlighting match zone in requests
myApp.filter('highlight', [
  '$sce',
  function ($sce) {
    return function (text, phrase) {
      if (phrase)
        text = text.replace(new RegExp('(' + phrase + '=[^ ]*)', 'gi'), '<span class="badge bg-primary">$1</span>');
      return $sce.trustAsHtml(text);
    };
  }
]);
/*date picker controller logic*/
myApp.controller('DatepickerBCtrl', [
  '$scope',
  'Error',
  function ($scope, Error) {
    $scope.today = function (dt) {
      $scope[dt] = new Date();
    };
    $scope.today();
    $scope.clear = function (dt) {
      $scope[dt] = null;
    };
    $scope.getLog = function () {
      Error.query({
        from: $scope.dtFrom,
        to: $scope.dtTo
      }, function (data) {
        data.forEach(function (elt, ix, arr) {
          arr[ix].time = elt._id.time.$date;
          arr[ix].host = elt._id.host;
          arr[ix].client_ip = elt._id.client_ip;
          arr[ix].path = elt._id.path;
        });
        $scope.$parent.rowCollection = angular.fromJson(data);
      });
    };
    $scope.open = function ($event, opened) {
      $event.preventDefault();
      $event.stopPropagation();
      $scope[opened] = opened;
    };
    $scope.dateOptions = {
      formatYear: 'yy',
      startingDay: 1
    };
    $scope.format = 'dd.MM.yyyy HH:mm:ss';
  }
]);
'use strict';
//site list controller
myApp.controller('ListCtrl', [
  '$scope',
  '$modal',
  'Site',
  '$timeout',
  function ($scope, $modal, Site, $timeout) {
    $scope.update = function () {
      Site.query(function (data) {
        $scope.sites = data;
      });
    };
    $scope.update();
    $scope.removeRecord = function (nomDomaine) {
      $scope.openDialog(nomDomaine);
    };
    // Modal: called by "supprimer site"
    $scope.openDialog = function (domain) {
      var modalInstance = $modal.open({
          templateUrl: 'myModalDialog',
          controller: 'ModalDialogCtrl'
        });
      modalInstance.result.then(function () {
        Site.delete({ domain: domain });
        $timeout(function () {
          $scope.update();
        }, 200);
      });
    };
    // Modal: called by "Afficher"
    $scope.openWL = function (site) {
      var modalInstance = $modal.open({
          templateUrl: 'wl_modal',
          controller: 'WlModalCtrl',
          size: 'lg',
          resolve: {
            site: function () {
              return site;
            }
          }
        });
    };
    // Modal: called by "modifier site " and Add new site
    $scope.open = function (domain) {
      var modalInstance = $modal.open({
          templateUrl: 'add_site_modal',
          controller: 'ModalCtrl',
          resolve: {
            domain: function () {
              return domain;
            },
            modif: function () {
              return true;
            }
          }
        });
      //saving modifications after dialog dismissal
      modalInstance.result.then(function () {
        $timeout(function () {
          $scope.update();
        }, 1000);
      });
    };
  }
]);
//controls the removal confirmation modal dialog
myApp.controller('ModalDialogCtrl', [
  '$scope',
  '$modalInstance',
  function ($scope, $modalInstance) {
    $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
    };
    $scope.ok = function () {
      $modalInstance.close();
    };
  }
]);
// modal that controls "Ajouter site" and "enregistrer site"
myApp.controller('ModalCtrl', [
  '$scope',
  '$modalInstance',
  'domain',
  'Site',
  'modif',
  function ($scope, $modalInstance, domain, Site, modif) {
    if (typeof domain !== 'undefined') {
      Site.get({ domain: domain }, function (data) {
        $scope.site = data;
      });
      $scope.modif = modif;
    } else {
      $scope.modif = false;
    }
    //cancel and quit the modal dialog;
    $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
    };
    // Add new domain
    $scope.add = function () {
      Site.save($scope.site);
      $modalInstance.close();
    };
    // Save edited domain.
    $scope.save = function () {
      Site.save($scope.site);
      $modalInstance.close();
    };
  }
]);
//whitelist modal controller
myApp.controller('WlModalCtrl', [
  '$scope',
  '$modalInstance',
  'site',
  'Site',
  '$http',
  'growl',
  function ($scope, $modalInstance, site, Site, $http, growl) {
    //dismiss and quit the modal dialog;
    $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
    };
    $scope.validate = function () {
      if ($scope.site['wlList'] == null)
        $scope.site['wlList'] = [];
      var rx = /BasicRule wl:[0-9]{1,4}(,[0-9]{1,4})*\s("mz:(\$?URL(_X)?(:[^|;]*)?)?(\|?\$?(ARGS|ARGS_VAR:[^|;]*|ARGS_VAR_X:[^|;]*|HEADERS|HEADERS_VAR:[^|;]*|HEADERS_VAR_X:[^|;]|BODY|BODY_VAR:[^|;]*|BODY_VAR_X:[^|;]|URL|URL:[^|;]*|URL_X:[^|;]*)(\|NAME)?)?")?;/;
      var wl = $scope.current == undefined ? '' : $scope.current;
      var wls = $scope.textarea == undefined ? [''] : $scope.textarea.split('\n');
      if (rx.test(wl) && $scope.site['wlList'].indexOf(wl) == -1) {
        $scope.site['wlList'].push(wl);
      }
      ;
      wls.forEach(function (elt, ix, array) {
        if (rx.test(elt) && $scope.site['wlList'].indexOf(elt) == -1) {
          $scope.site['wlList'].push(elt);
        }
      });
    };
    $scope.site = angular.copy(site);
    $scope.wls = $scope.site['wlList'];
    /*EXPERIMENTAL FEATURE  $scope.modifyWL= function (ix) {
   $scope.current=$scope.wls[ix];
   }*/
    $scope.removeWL = function (ix) {
      $scope.wls.splice(ix, 1);
    };
    $scope.ok = function () {
      Site.save($scope.site, function () {
        growl.success('Op\xe9ration r\xe9ussie');
      }, function () {
        growl.success('Op\xe9ration \xe9chou\xe9e');
      });
      $modalInstance.close();
    };
    $scope.ids = [];
    $scope.zones = [
      {
        value: 'all',
        key: 'Toute les zones'
      },
      {
        value: 'ARGS',
        key: 'Args'
      },
      {
        value: '$ARGS_VAR',
        key: 'Variables args'
      },
      {
        value: '$ARGS_VAR_X',
        key: 'Variables args regex'
      },
      {
        value: 'HEADERS',
        key: 'Headers'
      },
      {
        value: '$HEADERS_VAR',
        key: 'Variables header'
      },
      {
        value: '$HEADERS_VAR_X',
        key: 'Variables header regexp'
      },
      {
        value: 'BODY',
        key: 'Body'
      },
      {
        value: '$BODY_VAR',
        key: 'Variables body'
      },
      {
        value: '$BODY_VAR_X',
        key: 'Variables body regexp'
      },
      {
        value: '$URL',
        key: 'URL'
      },
      {
        value: '$URL_X',
        key: 'URL regexp'
      },
      {
        value: 'FILE_EXT',
        key: 'Extension du fichier '
      }
    ];
    $scope.urls = [
      {
        value: 'all',
        key: 'Tout les URLs'
      },
      {
        value: '$URL',
        key: 'URL'
      },
      {
        value: '$URL_X',
        key: 'URL regexp'
      }
    ];
    $scope.urlFltr = $scope.urls[0];
    $scope.zone = $scope.zones[0];
    $scope.dsblurl = true;
    $scope.dsblzone = true;
    $scope.isDsbl = function () {
      if ($scope.urlFltr.value == 'all') {
        $scope.dsblurl = true;
        $scope.urlContent = '';
      } else {
        $scope.dsblurl = false;
      }
      if ($scope.zone.value == '$URL' || $scope.zone.value == '$URL_X') {
        $scope.urlFltr = $scope.urls[0];
        $scope.dsblurl = true;
        $scope.urlContent = '';
      }
      if ($scope.zone.value == 'all' || $scope.zone.value == 'BODY' || $scope.zone.value == 'HEADERS' || $scope.zone.value == 'ARGS' || $scope.zone.value == 'FILE_EXT') {
        $scope.dsblzone = true;
        $scope.zoneContent = '';
      } else {
        $scope.dsblzone = false;
      }
    };
    $scope.loadRules = function ($query) {
      return $http.get('/api/settings', { cache: true }).then(function (response) {
        var rules = response.data.whitelistRules.filter(function (ruules) {
            return ruules.id.indexOf($query) != -1;
          });
        return rules;
      });
    };
    //watch changes in inputs and reflect them in main input
    $scope.$watch('[urlFltr,zone,urlContent,zoneContent,chkName,ids]', function () {
      $scope.current = buildStrIds($scope.ids) + buildStrMz($scope.urlFltr, $scope.urlContent, $scope.zone, $scope.zoneContent, $scope.chkName) + ';';
    }, true);
    //useful functions
    var buildStrIds = function (ids) {
      if (ids.length != 0) {
        var str = 'BasicRule wl:';
        ids.forEach(function (elt, ix, arr) {
          str += elt.id + ',';
        });
        return str.substring(0, str.lastIndexOf(','));
      } else
        return '';
    };
    var buildStrMz = function (fltr, fltrc, zone, zonec, nm) {
      var str = '';
      if (fltr['value'] != 'all' && zone['value'] != '$URL' && zone['value'] != '$URL_X') {
        str = ' "mz:' + fltr['value'] + (fltrc != undefined && fltrc != '' ? ':' + fltrc : '');
      } else if (fltr['value'] == 'all' && zone['value'] != '$URL' && zone['value'] != '$URL_X') {
        str = ' "mz:';
      } else {
        str = ' "mz:URL|';
      }
      if (zone['value'] != 'all' && zone['value'] != '$URL' && zone['value'] != '$URL_X' && fltr['value'] != 'all') {
        str += '|' + zone['value'] + (zonec != undefined && zonec != '' ? ':' + zonec : '');
      } else if (zone['value'] != 'all' && fltr['value'] == 'all') {
        str += zone['value'] + (zonec != undefined && zonec != '' ? ':' + zonec : '');
      } else {
        str = '';
      }
      if (nm) {
        str += '|NAME';
      }
      return str != '' ? str += '"' : str;
    };
    //rules highlighter options
    $scope.option = {
      words: [
        {
          color: '#37F230',
          words: ['^BasicRule wl:[0-9]{1,4}(,[0-9]{1,4})*\\s*("mz:(\\$?URL(_X)?(:[^|;]*)?)?(\\|?\\$?(ARGS|ARGS_VAR:[^|;]*|ARGS_VAR_X:[^|;]*|HEADERS|HEADERS_VAR:[^|;]*|HEADERS_VAR_X:[^|;]|BODY|BODY_VAR:[^|;]*|BODY_VAR_X:[^|;]|URL|URL:[^|;]*|URL_X:[^|;]*)(\\|NAME)?)?")?;$']
        },
        {
          color: '#FF534F',
          words: ['^.*$']
        }
      ]
    };
  }
]);
'use strict';
var myApp = angular.module('mgcrea.WafApp');
myApp.controller('UpdateCntrl', [
  '$scope',
  'Backups',
  'Update',
  'Restore',
  '$timeout',
  '$modal',
  'growl',
  function ($scope, Backups, Update, Restore, $timeout, $modal, growl) {
    Backups.query(function (data) {
      $scope.ops = data;
    });
    //openning the restore action confirmation dialog
    $scope.openr = function (ix) {
      var index = ix;
      var restoreModalInstance = $modal.open({
          templateUrl: 'restoreModalDialog',
          controller: 'RestoreDialogCtrl'
        });
      restoreModalInstance.result.then(function () {
        restore(index);
      });
    };
    //openning the update action confirmation dialog
    $scope.openu = function () {
      var updateModalInstance = $modal.open({
          templateUrl: 'updateModalDialog',
          controller: 'UpdateDialogCtrl'
        });
      updateModalInstance.result.then(function () {
        update();
        $timeout(function () {
          refresh();
        }, 200);
      });
    };
    var restore = function (ix) {
      Restore.get({ key: ix }).$promise.then(function () {
        growl.success('Restoration des donn\xe9es sites r\xe9ussie!');
      }, function () {
        growl.error('Restoration des donn\xe9es sites \xe9chou\xe9e!');
      });
    };
    var update = function () {
      Update.get().$promise.then(function () {
        growl.success('Mise \xe0 jour des fichiers de configuration r\xe9ussie!');
      }, function () {
        growl.error('Mise \xe0 jour des fichiers de configuration \xe9chou\xe9e!');
      });
    };
    var refresh = function () {
      Backups.query(function (data) {
        $scope.ops = data;
      });
    };
    $scope.toDate = function (ts) {
      return new Date(ts).toLocaleString();
    };
  }
]);
//controls the restore action confirmation modal dialog
myApp.controller('RestoreDialogCtrl', [
  '$scope',
  '$modalInstance',
  function ($scope, $modalInstance) {
    $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
    };
    $scope.ok = function () {
      $modalInstance.close();
    };
  }
]);
//controls the update action confirmation modal dialog
myApp.controller('UpdateDialogCtrl', [
  '$scope',
  '$modalInstance',
  function ($scope, $modalInstance) {
    $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
    };
    $scope.ok = function () {
      $modalInstance.close();
    };
  }
]);
'use strict';
//settings controller
myApp.controller('SettingsController', [
  '$scope',
  'Settings',
  'growl',
  '$modal',
  '$timeout',
  function ($scope, Settings, growl, $modal, $timeout) {
    //loading settings
    Settings.get(function (data) {
      $scope.options = data;
    });
    //openning the update action confirmation dialog
    $scope.open = function () {
      var saveModalInstance = $modal.open({
          templateUrl: 'saveModalDialog',
          controller: 'SaveModalController'
        });
      saveModalInstance.result.then(function () {
        Settings.save($scope.options, function () {
          growl.success('Enregistr\xe9!');
        }, function () {
          growl.error('Echec d\'enregistrement!');
        });
        $timeout(function () {
          Settings.get(function (data) {
            $scope.options = data;
          });
        }, 200);
      });
    };
    $scope.editorEnabled = {
      nginxConfDir: false,
      sitesEnabledDir: false,
      naxsiConfDir: false,
      haproxyConfDir: false,
      siteCertDir: false,
      whitelistRules: false
    };
    $scope.editable = {
      nginxConfDir: '',
      sitesEnabledDir: '',
      naxsiConfDir: '',
      haproxyConfDir: '',
      siteCertDir: '',
      whitelistRules: []
    };
    $scope.enableEditor = function (elm) {
      $scope.editorEnabled[elm] = true;
      $scope.editable[elm] = $scope.options[elm];
    };
    $scope.disableEditor = function (elm) {
      $scope.editorEnabled[elm] = false;
    };
    $scope.save = function (elm) {
      $scope.options[elm] = $scope.editable[elm];
      $scope.disableEditor(elm);
    };
    $scope.removeWL = function (ix) {
      $scope.options['whitelistRules'].splice(ix, 1);
    };
    $scope.savewl = function () {
      var jsonarr = [];
      $scope.options['whitelistRules'].forEach(function (elt, ix, arr) {
        jsonarr.push(elt.id);
      });
      if (jsonarr.indexOf($scope.reg.id) == -1)
        $scope.options['whitelistRules'].push(angular.copy($scope.reg));
    };
  }
]);
myApp.controller('SaveModalController', [
  '$scope',
  '$modalInstance',
  function ($scope, $modalInstance) {
    $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
    };
    $scope.ok = function () {
      $modalInstance.close();
    };
  }
]);
/**
 * Created by laassiri on 17/04/15.
 */
'use strict';
//rest api services
myApp.factory('Site', [
  '$resource',
  function ($resource) {
    return $resource('./api/site/:domain');
  }
]).factory('Status', [
  '$resource',
  function ($resource) {
    return $resource('./api/terminal', { cmd: '@cmd' }, {
      query: {
        method: 'GET',
        isArray: false
      }
    });
  }
]).factory('Error', [
  '$resource',
  function ($resource) {
    return $resource('./api/logs/error', {
      from: '@from',
      to: '@to'
    });
  }
]).factory('Access', [
  '$resource',
  function ($resource) {
    return $resource('./api/logs/access', {
      from: '@from',
      to: '@to'
    });
  }
]).factory('Update', [
  '$resource',
  function ($resource) {
    return $resource('./api/update');
  }
]).factory('Backups', [
  '$resource',
  function ($resource) {
    return $resource('./api/backups');
  }
]).factory('Restore', [
  '$resource',
  function ($resource) {
    return $resource('./api/backups/restore/:key');
  }
]).factory('Settings', [
  '$resource',
  function ($resource) {
    return $resource('/api/settings');
  }
]);
'use strict';
myApp.factory('httpInterceptor', [
  '$q',
  '$window',
  '$log',
  function ($q, $window, $log) {
    return {
      'response': function (response) {
        var responseHeaders;
        responseHeaders = response.headers();
        if (responseHeaders['content-type'] != undefined) {
          if (responseHeaders['content-type'].indexOf('text/html') !== -1 && response.data && response.data.indexOf('<meta name="unauthorized" content="true">') !== -1) {
            $window.location.reload();
            return $q.reject(response);
          }
        }
        return response;
      }
    };
  }
]);