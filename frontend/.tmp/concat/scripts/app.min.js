'use strict';
angular.module('mgcrea.WafApp', [
  'ngResource',
  'ngTagsInput',
  'ui.bootstrap',
  'smart-table',
  'ngRoute',
  'frapontillo.bootstrap-switch',
  'angularHighlightTextarea'
]).constant('version', 'v0.1.0').config([
  '$locationProvider',
  '$routeProvider',
  '$httpProvider',
  function ($locationProvider, $routeProvider, $httpProvider) {
    //Enable cross domain calls
    $httpProvider.defaults.useXDomain = true;
    delete $httpProvider.defaults.headers.common['X-Requested-With'];
    $locationProvider.html5Mode(false);
    $routeProvider.when('/', { templateUrl: 'views/home.html' }).when('/etat', { templateUrl: '../views/etat.html' }).when('/manage', { templateUrl: '../views/manage.html' }).when('/journalisation', { templateUrl: '../views/journalisation.html' }).when('/journalisationb', { templateUrl: '../views/journalisationb.html' }).when('/update', { templateUrl: '../views/update.html' }).otherwise({ redirectTo: '/' });
  }
]);
'use strict';
var myApp = angular.module('mgcrea.WafApp');
myApp.controller('MainCtrl', [
  '$scope',
  '$location',
  'version',
  function ($scope, $location, version) {
    $scope.$path = $location.path.bind($location);
    $scope.version = version;
  }
]);
myApp.controller('EtatCtrl', [
  '$scope',
  '$http',
  '$log',
  'alertService',
  function ($scope, $http, $log, alertService) {
    $scope.isSelected = '';
    $scope.onText = 'ON';
    $scope.offText = 'OFF';
    $scope.isActive = true;
    $scope.size = 'large';
    $scope.animate = true;
    $scope.radioOff = true;
    $scope.handleWidth = 'auto';
    $scope.labelWidth = 'auto';
    $scope.inverse = true;
    $scope.$watch('isSelected', function () {
      $log.info('selected');
      var res = $http({
          method: 'GET',
          url: 'https://localhost:8080/api/status'
        });
      res.success(function (data) {
        //alert( "failure message: " + JSON.stringify({data: data}));
        alertService.addAlert('success', data);
      });
      res.error(function (data) {
        //alert( "failure message: " + JSON.stringify({data: data}));
        alertService.addAlert('danger', data);
      });
    });
  }
]);
myApp.directive('bootstrapSwitch', [function () {
    return {
      restrict: 'A',
      require: '?ngModel',
      link: function (scope, element, attrs, ngModel) {
        element.bootstrapSwitch();
        element.on('switchChange.bootstrapSwitch', function (event, state) {
          if (ngModel) {
            scope.$apply(function () {
              ngModel.$setViewValue(state);
            });
          }
        });
        scope.$watch(attrs.ngModel, function (newValue, oldValue) {
          if (newValue) {
            element.bootstrapSwitch('state', true, true);
          } else {
            element.bootstrapSwitch('state', false, true);
          }
        });
      }
    };
  }]);
myApp.service('alertService', [
  '$timeout',
  function ($timeout) {
    var data = [];
    this.alerts = function () {
      return data;
    };
    this.addAlert = function (type, msg) {
      data.push({
        type: type,
        msg: msg
      });
      $timeout(function () {
        data.splice(data.indexOf({
          type: type,
          msg: msg
        }), 1);
      }, 3000);
    };
    this.deleteAlert = function (index) {
      data.splice(index, 1);
    };
  }
]);
myApp.controller('alertCtrl', [
  '$scope',
  'alertService',
  function ($scope, alertService) {
    $scope.alerts = alertService.alerts();
    $scope.closeAlert = function (index) {
      alertService.deleteAlert(index);
    };
  }
]);
'use strict';
var myApp = angular.module('mgcrea.WafApp');
myApp.factory('Access', [
  '$resource',
  function ($resource) {
    return $resource('/api/logs/access', {
      from: '@from',
      to: '@to'
    });
  }
]);
/*Pagination controller*/
myApp.controller('paginationCtrl', [
  '$scope',
  'Access',
  function ($scope, Access) {
    Access.query(function (data) {
      data.forEach(function (elt, ix, arr) {
        arr[ix].time = elt.time.$date;
      });
      $scope.rowCollection = angular.fromJson(data);
      window.aa = angular.fromJson(data);
    });
    $scope.displayCollection = [].concat($scope.rowCollection);
    $scope.itemsByPage = 15;
    $scope.predicates = [
      {
        key: 'Filter by Host',
        'value': 'host'
      },
      {
        key: 'Filter by User_IP',
        'value': 'client_ip'
      },
      {
        key: 'Filter by User',
        'value': 'client'
      },
      {
        key: 'Filter by URI_Path',
        'value': 'path'
      },
      {
        key: 'Filter by Method',
        'value': 'method'
      },
      {
        key: 'Filter by HTTP_Status',
        'value': 'code'
      },
      {
        key: 'Filter by Referer',
        'value': 'referer'
      },
      {
        key: 'Filter by Bytes',
        'value': 'size'
      },
      {
        key: 'Filter by X_Forwarded_For',
        'value': 'x_forwarded_for'
      },
      {
        key: 'Filter by User_Agent',
        'value': 'user_agent'
      }
    ];
    $scope.selectedPredicate = $scope.predicates[0].value;
  }
]);
/*date picker controller logic*/
myApp.controller('DatepickerCtrl', [
  '$scope',
  'Access',
  function ($scope, Access) {
    $scope.today = function (dt) {
      $scope[dt] = new Date();
    };
    $scope.today();
    $scope.clear = function (dt) {
      $scope[dt] = null;
    };
    $scope.getLog = function () {
      Access.query({
        from: $scope.dtFrom,
        to: $scope.dtTo
      }, function (data) {
        data.forEach(function (elt, ix, arr) {
          arr[ix].time = elt.time.$date;
        });
        $scope.$parent.rowCollection = angular.fromJson(data);
      });
    };
    $scope.open = function ($event, opened) {
      $event.preventDefault();
      $event.stopPropagation();
      $scope[opened] = opened;
    };
    $scope.dateOptions = {
      formatYear: 'yy',
      startingDay: 1
    };
    $scope.format = 'dd.MM.yyyy HH:mm:ss';
  }
]);
'use strict';
var myApp = angular.module('mgcrea.WafApp');
myApp.factory('Error', [
  '$resource',
  function ($resource) {
    return $resource('/api/logs/error', {
      from: '@from',
      to: '@to'
    });
  }
]);
/*Pagination controller*/
myApp.controller('paginationBCtrl', [
  '$scope',
  'Error',
  '$modal',
  function ($scope, Error, $modal) {
    Error.query(function (data) {
      data.forEach(function (elt, ix, arr) {
        arr[ix].time = elt._id.time.$date;
        arr[ix].host = elt._id.host;
        arr[ix].client_ip = elt._id.client_ip;
        arr[ix].path = elt._id.path;
      });
      $scope.rowCollection = angular.fromJson(data);
      window.aa = angular.fromJson(data);
    });
    $scope.displayCollection = [].concat($scope.rowCollection);
    $scope.itemsByPage = 15;
    $scope.predicates = [
      {
        key: 'Filter by Host',
        'value': 'host'
      },
      {
        key: 'Filter by User IP',
        'value': 'client ip'
      },
      {
        key: 'Filter by URI Path',
        'value': 'path'
      }
    ];
    $scope.selectedPredicate = $scope.predicates[0].value;
    $scope.isCollapsed = true;
    // Modal: called by "supprimer site"
    $scope.openDialog = function (rules, size) {
      var $modalInstance = $modal.open({
          templateUrl: 'rulesModalDialog',
          controller: 'ShowDialogCtrl',
          size: size,
          resolve: {
            rules: function () {
              return rules;
            }
          }
        });
    };
  }
]);
//show rules modal controller
myApp.controller('ShowDialogCtrl', [
  '$scope',
  '$modalInstance',
  'rules',
  function ($scope, $modalInstance, rules) {
    $scope.rules = rules;
    //dismiss and quit the modal dialog;
    $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
    };
  }
]);
//experimental feature : filter highlighting match zone in requests
myApp.filter('highlight', [
  '$sce',
  function ($sce) {
    return function (text, phrase) {
      if (phrase)
        text = text.replace(new RegExp('(' + phrase + '=[^ ]*)', 'gi'), '<span class="badge bg-primary">$1</span>');
      return $sce.trustAsHtml(text);
    };
  }
]);
/*date picker controller logic*/
myApp.controller('DatepickerBCtrl', [
  '$scope',
  'Error',
  function ($scope, Error) {
    $scope.today = function (dt) {
      $scope[dt] = new Date();
    };
    $scope.today();
    $scope.clear = function (dt) {
      $scope[dt] = null;
    };
    $scope.getLog = function () {
      Error.query({
        from: $scope.dtFrom,
        to: $scope.dtTo
      }, function (data) {
        data.forEach(function (elt, ix, arr) {
          arr[ix].time = elt._id.time.$date;
          arr[ix].host = elt._id.host;
          arr[ix].client_ip = elt._id.client_ip;
          arr[ix].path = elt._id.path;
        });
        $scope.$parent.rowCollection = angular.fromJson(data);
      });
    };
    $scope.open = function ($event, opened) {
      $event.preventDefault();
      $event.stopPropagation();
      $scope[opened] = opened;
    };
    $scope.dateOptions = {
      formatYear: 'yy',
      startingDay: 1
    };
    $scope.format = 'dd.MM.yyyy HH:mm:ss';
  }
]);
'use strict';
var myApp = angular.module('mgcrea.WafApp');
myApp.factory('Site', [
  '$resource',
  function ($resource) {
    return $resource('/api/site/:domain');
  }
]);
myApp.controller('ListCtrl', [
  '$scope',
  '$modal',
  'Site',
  '$timeout',
  function ($scope, $modal, Site, $timeout) {
    $scope.update = function () {
      Site.query(function (data) {
        $scope.sites = data;
      });
    };
    $scope.update();
    $scope.removeRecord = function (nomDomaine) {
      $scope.openDialog(nomDomaine);
    };
    // Modal: called by "supprimer site"
    $scope.openDialog = function (domain) {
      var modalInstance = $modal.open({
          templateUrl: 'myModalDialog',
          controller: 'ModalDialogCtrl'
        });
      modalInstance.result.then(function () {
        Site.delete({ domain: domain });
        $timeout(function () {
          $scope.update();
        }, 200);
      });
    };
    // Modal: called by "Afficher"
    $scope.openWL = function (site) {
      var modalInstance = $modal.open({
          templateUrl: 'wl_modal',
          controller: 'WlModalCtrl',
          size: 'lg',
          resolve: {
            site: function () {
              return site;
            }
          }
        });
    };
    // Modal: called by "modifier site " and Add new site
    $scope.open = function (domain) {
      var modalInstance = $modal.open({
          templateUrl: 'add_site_modal',
          controller: 'ModalCtrl',
          resolve: {
            domain: function () {
              return domain;
            },
            modif: function () {
              return true;
            }
          }
        });
      //saving modifications after dialog dismissal
      modalInstance.result.then(function () {
        $timeout(function () {
          $scope.update();
        }, 1000);
      });
    };
  }
]);
//controls the removal confirmation modal dialog
myApp.controller('ModalDialogCtrl', [
  '$scope',
  '$modalInstance',
  function ($scope, $modalInstance) {
    $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
    };
    $scope.ok = function () {
      $modalInstance.close();
    };
  }
]);
// modal that controls "Ajouter site" and "enregistrer site"
myApp.controller('ModalCtrl', [
  '$scope',
  '$modalInstance',
  'domain',
  'Site',
  'modif',
  function ($scope, $modalInstance, domain, Site, modif) {
    if (typeof domain !== 'undefined') {
      Site.get({ domain: domain }, function (data) {
        $scope.site = data;
      });
      $scope.modif = modif;
    } else {
      $scope.modif = false;
    }
    //cancel and quit the modal dialog;
    $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
    };
    // Add new domain
    $scope.add = function () {
      Site.save($scope.site);
      $modalInstance.close();
    };
    // Save edited domain.
    $scope.save = function () {
      Site.save($scope.site);
      $modalInstance.close();
    };
  }
]);
//whitelidst modal controller
myApp.controller('WlModalCtrl', [
  '$scope',
  '$modalInstance',
  'site',
  'Site',
  '$http',
  function ($scope, $modalInstance, site, Site, $http) {
    //dismiss and quit the modal dialog;
    $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
    };
    $scope.wls = site.wlList;
    $scope.site = site;
    $scope.modifyWL = function (wl) {
      $scope.current = wl;
    };
    $scope.ok = function () {
      if ($scope.site.wlList == null)
        $scope.site.wlList = [];
      if ($scope.current != null) {
        $scope.site.wlList.push($scope.current);
        Site.save($scope.site);
      }
    };
    $scope.ids = [];
    $scope.zones = [
      {
        value: 'all',
        key: 'Toute les zones'
      },
      {
        value: 'ARGS',
        key: 'Args'
      },
      {
        value: '$ARGS_VAR',
        key: 'Variables args'
      },
      {
        value: '$ARGS_VAR_X',
        key: 'Variables args regex'
      },
      {
        value: 'HEADERS',
        key: 'Headers'
      },
      {
        value: '$HEADERS_VAR',
        key: 'Variables header'
      },
      {
        value: '$HEADERS_VAR_X',
        key: 'Variables header regexp'
      },
      {
        value: 'BODY',
        key: 'Body'
      },
      {
        value: '$BODY_VAR',
        key: 'Variables body'
      },
      {
        value: '$BODY_VAR_X',
        key: 'Variables body regexp'
      },
      {
        value: '$URL',
        key: 'URL'
      },
      {
        value: '$URL_X',
        key: 'URL regexp'
      },
      {
        value: 'FILE_EXT',
        key: 'Extension du fichier '
      }
    ];
    $scope.urls = [
      {
        value: 'all',
        key: 'Tout les URLs'
      },
      {
        value: '$URL',
        key: 'URL'
      },
      {
        value: '$URL_X',
        key: 'URL regexp'
      }
    ];
    $scope.urlFltr = $scope.urls[0];
    $scope.zone = $scope.zones[0];
    $scope.dsblurl = true;
    $scope.dsblzone = true;
    $scope.isDsbl = function () {
      if ($scope.dsblurl.value == 'all') {
        $scope.dsblurl = true;
        $scope.urlContent = '';
      } else {
        $scope.dsblurl = false;
      }
      if ($scope.zone.value == 'all' || $scope.zone.value == 'BODY' || $scope.zone.value == 'HEADERS' || $scope.zone.value == 'ARGS' || $scope.zone.value == 'FILE_EXT') {
        $scope.dsblzone = true;
        $scope.zoneContent = '';
      } else {
        $scope.dsblzone = false;
      }
    };
    ;
    window.ab = {
      'dsbl': $scope.dsblzone,
      'zone': $scope.zone
    };
    window.ac = {
      'dsbl': $scope.dsblurl,
      'url': $scope.urlFltr
    };
    window.aa = $scope.ids;
    $scope.loadRules = function ($query) {
      return $http.get('data.json', { cache: true }).then(function (response) {
        var rules = response.data.filter(function (country) {
            return country.id.indexOf($query) != -1;
          });
        return rules;
      });
    };
    $scope.option = {
      words: [
        {
          color: '#37F230',
          words: ['^BasicRule wl:[0-9]{1,4}(,[0-9]{1,4})*\\s"mz:(\\$?URL(_X)?(:[^|;]*)?)?(\\|?\\$?(ARGS|ARGS_VAR:[^|;]*|ARGS_VAR_X:[^|;]*|HEADERS|HEADERS_VAR:[^|;]*|HEADERS_VAR_X:[^|;]|BODY|BODY_VAR:[^|;]*|BODY_VAR_X:[^|;]|URL|URL:[^|;]*|URL_X:[^|;]*)(\\|NAME)?)?";$']
        },
        {
          color: '#FF534F',
          words: ['^.*$']
        }
      ]
    };
  }
]);